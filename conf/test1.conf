server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 3000;
        server_name jd.thomas.me;
        location / {
            default_type text/html;
            content_by_lua_block {
                ngx.say("HelloWorld")
            }
    	}

    	location = /sum {
	    	
	    	#只允许内部调用
	    	internal;

			# 这里做了一个求和运算只是一个例子，可以在这里完成一些数据库、
	    	# 缓存服务器的操作，达到基础模块和业务逻辑分离目的

	    	content_by_lua_block {
		    	ngx.sleep(0.2)	
	    		local args = ngx.req.get_uri_args()
	    		ngx.print(tonumber(args.a)+tonumber(args.b))
	    	}
	    }

	    location = /subduction {
	    	internal;
	    	content_by_lua_block {
	    		ngx.sleep(0.1)
	    		local args = ngx.req.get_uri_args()
	    		ngx.print(tonumber(args.a)-tonumber(args.b))
	    	}
	    }

	    location = /app/test {
	    	content_by_lua_block {
	    		local res = ngx.location.capture("/sum",{args={a=3,b=8}})
	    		ngx.say("status:",res.status,"\nresponse:",res.body)
	    	}
	    }

	    location = /app/test_parallels {
	    	content_by_lua_block {
	    		local start_time = ngx.now()
	    		local res1,res2 = ngx.location.capture_multi({
	    			{"/sum",{args={a=3,b=8}}},
	    			{"/subduction",{args={a=7,b=2}}}
	    		})
	    		ngx.say("status 1:",res1.status," response 1:",res1.body)
	    		ngx.say("status 2:",res2.status," response 2:",res2.body)
	    		ngx.say("time used:",ngx.now()-start_time)
	    	}
	    }

	    location = /app/test_queue {
	    	content_by_lua_block {
	    		local start_time = ngx.now()
	    		local res1 = ngx.location.capture_multi({
	    			{"/sum",{args={a=8,b=12}}}
	    		})
	    		local res2 = ngx.location.capture_multi({
	    			{"/subduction",{args={a=5,b=11}}}
	    		})
	    		ngx.say("status:", res1.status, " response:", res1.body)
        		ngx.say("status:", res2.status, " response:", res2.body)
        		ngx.say("time used:", ngx.now() - start_time)
	    	}
	    }

	    location ~ ^/static/([-_a-zA-Z0-9/]+).jpg {
	    	set $image_name $1;
	    	content_by_lua_block {
	    		ngx.exec("/download_internal/images/" .. ngx.var.image_name .. ".jpg")
	    	}
	    }

	    location /download_internal {
	    	internal;
	    	# 这里还可以有其他统一的 download 下载设置，例如限速等
	    	#alias ../download
	    }


	    location = /foo {
		    content_by_lua_block {
		        ngx.say([[I am foo]])
		    }
		}

		location = / {
		    rewrite_by_lua_block {
		        return ngx.redirect('/foo');
		    }
		}
    }